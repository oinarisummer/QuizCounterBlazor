@page "/By"
@using QuizCounter.Model

<div class="container">

    <div class="d-grid d-flex justify-content-end">
        <button type="reset" class="btn oi oi-reload" @onclick="allReset" />
    </div>
    
    <input class="mb-3" placeholder="initial value?" @bind="initialValue">
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-4 row-cols-xl-5 g-3">
        @foreach (var counter in counters)
        {
            <div class="col">
                <div class="card" @key="counter.Id">
                    <div class="card-body text-center">
                        <div class="d-grid d-flex justify-content-end">
                            <button type="button" class="btn align-end m-0 oi oi-reload" @onclick="@(e => reset(counter.Id))" />
                            <button type="button" class="btn align-end m-0 oi oi-minus" @onclick="@(e => delete(counter.Id))" />
                        </div>

                        <input placeholder="Name?" class="col-10 my-2">

                        @if (counter.Score >= initialValue * initialValue)
                        {
                            <h1 class="card-title display-3 text-primary">
                                @counter.Score
                            </h1>
                        }
                        else
                        {
                            <h1 class="card-title display-3">
                                @counter.Score
                            </h1>
                        }

                        <div class="container">
                            <div class="row row-cols-2">
                                <div class="col">
                                    <h2>@counter.Correct</h2>
                                    <button type="button" class="btn btn-danger px-3 oi oi-circle-check" @onclick="@(e => onCorrect(counter.Id))" />
                                </div>
                                <div class="col">
                                    <h2>@counter.Worng</h2>
                                    <button type="button" class="btn btn-primary px-3 oi oi-circle-x" @onclick="@(e => onWorng(counter.Id))" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

        <button type="button" class="btn oi oi-plus" @onclick="addCard" />
    </div>
</div>

@code {
    private int initialValue = 10;

    protected override void OnInitialized()
    {
        counters.Add(new CounterModel(){Worng = initialValue});
    }

    private List<CounterModel> counters = new();

    private void addCard()
    {
        counters.Add(new CounterModel(){Worng = initialValue});
    }

    private void onCorrect(Guid key)
    {
        counters.Single(c => c.Id == key).Correct++;
        calcScore(counters.Single(c => c.Id == key));
    }

    private void onWorng(Guid key)
    {
        counters.Single(c => c.Id == key).Worng--;
        calcScore(counters.Single(c => c.Id == key));
    }

    private void calcScore(CounterModel counter)
    {
        counter.Score = counter.Correct * counter.Worng;
    }

    private void reset(Guid key)
    {
        counters.Single(c => c.Id == key).Reset();
        counters.Single(c => c.Id == key).Worng = initialValue;
    }

    private void delete(Guid key)
    {
        counters.RemoveAll(c => c.Id == key);
    }
    
    private void allReset()
    {
        foreach (var counter in counters)
        {
            counter.Reset();
        }
    }
}


