@page "/"
@using QuizCounter.Model

<div class="container">

    <div class="d-grid d-flex justify-content-end">
        <button type="reset" class="btn oi oi-reload" @onclick="allReset" />
    </div>
    
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-4 row-cols-xl-5 g-3">
        @foreach (var counter in counters)
        {
            <div class="col">
                <div class="card" @key="counter.Id">
                    <div class="card-body text-center">
                        <div class="d-grid d-flex">
                            @if (counter.UndoStack.Any())
                            {
                                <button type="button" class="me-auto btn m-0 oi oi-action-undo" @onclick="@(e => undo(counter.Id))" />
                            }
                            else
                            {
                                <button type="button" class="me-auto btn m-0 oi oi-action-undo" disabled />
                            }
                            <button type="button" class="btn m-0 oi oi-reload" @onclick="@(e => reset(counter.Id))" />
                            <button type="button" class="btn m-0 oi oi-minus" @onclick="@(e => delete(counter.Id))" />
                        </div>
    
                        <input placeholder="Name?" class="col-10 my-2">
    
                        <div class="container mt-4">
                            <div class="row row-cols-2">
                                <div class="col">
                                    <h1 class="display-4">@counter.Correct</h1>
                                    <button type="button" class="btn btn-danger px-3 oi oi-circle-check" @onclick="@(e => onCorrect(counter.Id))" />
                                </div>
                                <div class="col">
                                    <h1 class="display-4">@counter.Worng</h1>
                                    <button type="button" class="btn btn-primary px-3 oi oi-circle-x" @onclick="@(e => onWorng(counter.Id))" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

        <button type="button" class="btn oi oi-plus" @onclick="addCard" />
    </div>
</div>

@code {
    private List<CounterModel> counters = new();

    protected override void OnInitialized()
    {
        counters.Add(new CounterModel());
    }

    private void addCard()
    {
        counters.Add(new CounterModel());
    }

    private void onCorrect(Guid key)
    {
        counters.Single(c => c.Id == key).PushUndoStack();
        counters.Single(c => c.Id == key).Correct++;
    }

    private void onWorng(Guid key)
    {
        counters.Single(c => c.Id == key).PushUndoStack();
        counters.Single(c => c.Id == key).Worng++;
    }

    private void undo(Guid key)
    {
        counters.Single(c => c.Id == key).Undo();
    }

    private void reset(Guid key) => counters.Single(c => c.Id == key).Reset();

    private void delete(Guid key)
    {
        counters.RemoveAll(c => c.Id == key);
    }

    private void allReset()
    {
        foreach (var counter in counters)
        {
            counter.Reset();
        }
    }
}



